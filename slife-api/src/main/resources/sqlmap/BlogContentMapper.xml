<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.slife.mapper.BlogContentMapper">
  <resultMap id="BaseResultMap" type="com.slife.model.BlogContent">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_id" jdbcType="BIGINT" property="createId" />
    <result column="update_id" jdbcType="BIGINT" property="updateId" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="tags" jdbcType="VARCHAR" property="tags" />
    <result column="categories" jdbcType="VARCHAR" property="categories" />
    <result column="allow_comment" jdbcType="INTEGER" property="allowComment" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="author" jdbcType="VARCHAR" property="author" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.slife.model.BlogContent">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, create_id, update_id, create_date, update_date, title, type, tags, categories, 
    allow_comment, status, author
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.slife.model.BlogContentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_content
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_content
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from blog_content
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.slife.model.BlogContent">
    insert into blog_content (id, create_id, update_id, 
      create_date, update_date, title, 
      type, tags, categories, 
      allow_comment, status, author, 
      content)
    values (#{id,jdbcType=BIGINT}, #{createId,jdbcType=BIGINT}, #{updateId,jdbcType=BIGINT}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, #{title,jdbcType=VARCHAR}, 
      #{type,jdbcType=VARCHAR}, #{tags,jdbcType=VARCHAR}, #{categories,jdbcType=VARCHAR}, 
      #{allowComment,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{author,jdbcType=VARCHAR}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.slife.model.BlogContent">
    update blog_content
    set create_id = #{createId,jdbcType=BIGINT},
      update_id = #{updateId,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      title = #{title,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      tags = #{tags,jdbcType=VARCHAR},
      categories = #{categories,jdbcType=VARCHAR},
      allow_comment = #{allowComment,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      author = #{author,jdbcType=VARCHAR},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.slife.model.BlogContent">
    update blog_content
    set create_id = #{createId,jdbcType=BIGINT},
      update_id = #{updateId,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      title = #{title,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      tags = #{tags,jdbcType=VARCHAR},
      categories = #{categories,jdbcType=VARCHAR},
      allow_comment = #{allowComment,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      author = #{author,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>